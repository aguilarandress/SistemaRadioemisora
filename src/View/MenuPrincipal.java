/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.Cancion.Cancion;
import Model.Radioemisora.RadioEmisora;
import Model.Locutor.Locutor;
import Model.Programa.Programa;
import Model.Disco.Disco;
import Model.Cancion.CancionArchivo;
import Model.Cancion.Cancion;
import Model.Playlist.PlayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.util.ArrayList;

import filereader.ExcelReader;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Menu principal con el cual el usuario interactua
 * 
 * @since 1.0
 * @author Andres Aguilar
 * @author Fabian Vargas
 * @author Kenneth Sanchez
 * @version 1.0
 */
public class MenuPrincipal extends javax.swing.JFrame {

    private RadioEmisora emisora;

    private DefaultListModel locutoresListModel = new DefaultListModel();
    private DefaultListModel programasListModel = new DefaultListModel();
    private DefaultListModel discosListModel = new DefaultListModel();
    private DefaultListModel cancionesListModel = new DefaultListModel();
    private DefaultListModel cancionesPorGenero = new DefaultListModel();
    private DefaultListModel cancionesPorCantante = new DefaultListModel();
    private DefaultListModel locutoresDeEmisoraListModel = new DefaultListModel();
    private DefaultListModel programasDeEmisoraListModel = new DefaultListModel();
    private DefaultListModel playlistListModel = new DefaultListModel();
    private DefaultListModel cancionesEnPlaylistListModel = new DefaultListModel();
    private DefaultListModel cancionesArchivoListModel = new DefaultListModel();

    private DefaultComboBoxModel locutoresComboBoxModel = new DefaultComboBoxModel();
    private DefaultComboBoxModel locutoresProgramasComboBoxModel = new DefaultComboBoxModel();
    private DefaultComboBoxModel programasComboBoxModel = new DefaultComboBoxModel();
    private DefaultComboBoxModel discoComboBoxModel = new DefaultComboBoxModel();
    private DefaultComboBoxModel cancionesArchivoBoxModel = new DefaultComboBoxModel();
    private DefaultComboBoxModel cancionesActComboBoxModel = new DefaultComboBoxModel();
    private DefaultComboBoxModel discoCancionComboBoxModel = new DefaultComboBoxModel();
    private DefaultComboBoxModel playlistComboBoxModel = new DefaultComboBoxModel();

    /**
     * Creates new form MenuPrincipal
     */
    public MenuPrincipal(RadioEmisora pEmisora) {

        initComponents();
        this.emisora = pEmisora;

        this.programasLocutoresCombo.setModel(this.locutoresProgramasComboBoxModel);
        this.programasListaProgramasBox.setModel(this.programasListModel);
        this.programasListaCombo.setModel(this.programasComboBoxModel);
        this.listaDiscoComboBox.setModel(this.discoComboBoxModel);
        this.discosListaBox.setModel(this.discosListModel);
        this.actualizarProgramasComboBox.setModel(this.programasComboBoxModel);
        this.discoCancionCombo.setModel(this.discoComboBoxModel);
        this.actualizarCancionArchivoComboBox.setModel(this.cancionesArchivoBoxModel);
        this.seleccionarDiscoComboBox.setModel(this.discoCancionComboBoxModel);
        this.seleccionarCancionComboBox.setModel(this.cancionesActComboBoxModel);
        this.listaCanciones.setModel(cancionesListModel);
        this.cancionesArchivoList.setModel(this.cancionesArchivoListModel);
        this.setLocationRelativeTo(null);

        // Desabiliatr tabs
        this.toggleWindowTabs(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menuBar2 = new java.awt.MenuBar();
        menu3 = new java.awt.Menu();
        menu4 = new java.awt.Menu();
        jColorChooser1 = new javax.swing.JColorChooser();
        windowTabs = new javax.swing.JTabbedPane();
        radioEmisoraTab = new javax.swing.JPanel();
        nombreLabel = new javax.swing.JLabel();
        frecuenciaLabel = new javax.swing.JLabel();
        urlLabel = new javax.swing.JLabel();
        direccionFisicaLabel = new javax.swing.JLabel();
        nombreEmisoraShow = new javax.swing.JLabel();
        frecuenciaEmisoraShow = new javax.swing.JLabel();
        urlEmisoraShow = new javax.swing.JLabel();
        direccionFisicaEmisoraShow = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        nuevoNombreLabel = new javax.swing.JLabel();
        nuevaFrecuenciaLabel = new javax.swing.JLabel();
        nuevoUrlLabel = new javax.swing.JLabel();
        nuevaDireccionFisicaLabel = new javax.swing.JLabel();
        nombreEmisoraInput = new javax.swing.JTextField();
        frecuenciaEmisoraInput = new javax.swing.JTextField();
        urlEmisoraInput = new javax.swing.JTextField();
        direccionFisicaInput = new javax.swing.JTextField();
        btnActualizarEmisora = new javax.swing.JButton();
        locutoresTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaLocutoresBox = new javax.swing.JList<>();
        nuevoLocutorLabel = new javax.swing.JLabel();
        listaLocutoresLabel = new javax.swing.JLabel();
        IdLocutorLabel = new javax.swing.JLabel();
        nombreLocutorLabel = new javax.swing.JLabel();
        correoLocutorLabel = new javax.swing.JLabel();
        telefonoLocutorLabel = new javax.swing.JLabel();
        direccionLocutorLabel = new javax.swing.JLabel();
        sexoLocutorLabel = new javax.swing.JLabel();
        fechaLocutorLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        locutorNombreInput = new javax.swing.JTextField();
        locutorIdInput = new javax.swing.JTextField();
        locutorCorreoInput = new javax.swing.JTextField();
        locutorTelefonoInput = new javax.swing.JTextField();
        locutorDireccionInput = new javax.swing.JTextField();
        locutorSexoInput = new javax.swing.JTextField();
        locutorFechaInput = new javax.swing.JTextField();
        botonAgregarLocutor = new javax.swing.JButton();
        actualizarLocutorLabel = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        locutoresActualizarCombo = new javax.swing.JComboBox<>();
        botonVerInfoLocutor = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        playlistsTab = new javax.swing.JPanel();
        nuevaPlaylistLabel = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        playlistNombre = new javax.swing.JLabel();
        playlistNombreInput = new javax.swing.JTextField();
        botonAgregarPlaylist = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        playlistsListaPlaylistsBox = new javax.swing.JList<>();
        listaPlaylistsLabel = new javax.swing.JLabel();
        verCancionesPlaylistLabel = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        playlistsCombo = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        playlistsListaCancionesBox = new javax.swing.JList<>();
        playlistsProgramaLabel = new javax.swing.JLabel();
        playlistProgramaComboBox = new javax.swing.JComboBox<>();
        discosTab = new javax.swing.JPanel();
        discoNombreLabel = new javax.swing.JLabel();
        nombreDiscoTextField = new javax.swing.JTextField();
        cantanteDiscoTextField = new javax.swing.JTextField();
        cantanteDiscoLabel = new javax.swing.JLabel();
        generoDiscoLabel = new javax.swing.JLabel();
        generoDiscoTextField = new javax.swing.JTextField();
        anioDiscoLabel = new javax.swing.JLabel();
        anioDiscoTextField = new javax.swing.JTextField();
        ubicacionDiscoLabel = new javax.swing.JLabel();
        ubicacionDiscoTextField = new javax.swing.JTextField();
        imagenDiscoTextField = new javax.swing.JTextField();
        imagenDiscoLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        discosListaBox = new javax.swing.JList<>();
        listaDiscoComboBox = new javax.swing.JComboBox<>();
        botonCrearDisco = new javax.swing.JButton();
        botonVerDisco = new javax.swing.JButton();
        listaDiscosLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();
        programasTab = new javax.swing.JPanel();
        nuevoProgramaLabel = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        programaNombreLabel = new javax.swing.JLabel();
        programaHorarioLabel = new javax.swing.JLabel();
        programasDuracionLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        programaNombreInput = new javax.swing.JTextField();
        programaHorarioInput = new javax.swing.JTextField();
        programaDuracionInput = new javax.swing.JTextField();
        programasGeneroInput = new javax.swing.JTextField();
        botonCrearNuevoPrograma = new javax.swing.JButton();
        programasListaCombo = new javax.swing.JComboBox<>();
        jSeparator4 = new javax.swing.JSeparator();
        programaAsignarLocutorLabel = new javax.swing.JLabel();
        programasLocutoresCombo = new javax.swing.JComboBox<>();
        botonAsignarLocutor = new javax.swing.JButton();
        programasListaLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        programasListaProgramasBox = new javax.swing.JList<>();
        actualizarProgramaLabel = new javax.swing.JLabel();
        jSeparator10 = new javax.swing.JSeparator();
        actualizarProgramasComboBox = new javax.swing.JComboBox();
        verInformacionProgramaBtn = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cancionesTab = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        cancionArchivoAlbumLabel = new javax.swing.JLabel();
        cancionArchivoAlbumInput = new javax.swing.JTextField();
        cancionArchivoNombreLabel = new javax.swing.JLabel();
        cancionArchivoNombreInput = new javax.swing.JTextField();
        cancionArchivoCantanteLabel = new javax.swing.JLabel();
        cancionArchivoCantanteInput = new javax.swing.JTextField();
        cancionArchivoDuracionLabel = new javax.swing.JLabel();
        cancionArchivoDuracionInput = new javax.swing.JTextField();
        cancionArchivoGeneroLabel = new javax.swing.JLabel();
        cancionArchivoGeneroInput = new javax.swing.JTextField();
        cancionArchivoPathLabel = new javax.swing.JLabel();
        cancionArchivoPathInput = new javax.swing.JTextField();
        actualizarCancionArchivoLabel = new javax.swing.JLabel();
        jSeparator13 = new javax.swing.JSeparator();
        actualizarCancionArchivoComboBox = new javax.swing.JComboBox();
        verInformacionCancionArchivoBtn = new javax.swing.JButton();
        agregarCancionArchivoBtn = new javax.swing.JButton();
        cargarCancionesArchivoLabel = new javax.swing.JLabel();
        jSeparator14 = new javax.swing.JSeparator();
        cargarCancionesArchivoPathInput = new javax.swing.JTextField();
        cargarCancionesArchivoBtn = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        cancionesArchivoList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        nombreCancionLabel = new javax.swing.JLabel();
        generoCancionLabel = new javax.swing.JLabel();
        duracionCancionLabel = new javax.swing.JLabel();
        cantanteCancionLabel = new javax.swing.JLabel();
        nombreCancionInput = new javax.swing.JTextField();
        generoCancionInput = new javax.swing.JTextField();
        duracionCancionInput = new javax.swing.JTextField();
        cantanteCancionInput = new javax.swing.JTextField();
        discoCancionCombo = new javax.swing.JComboBox<>();
        discoCancionLabel = new javax.swing.JLabel();
        botonAgregarCancion = new javax.swing.JButton();
        seleccionarDiscoComboBox = new javax.swing.JComboBox<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        listaCanciones = new javax.swing.JList<>();
        jSeparator15 = new javax.swing.JSeparator();
        jSeparator16 = new javax.swing.JSeparator();
        seleccionarDiscoLabel = new javax.swing.JLabel();
        agregarCancionLabel = new javax.swing.JLabel();
        seleccionarCancionComboBox = new javax.swing.JComboBox<>();
        editarCancionBtn = new javax.swing.JButton();
        cargarCancionesDiscoLabel = new javax.swing.JLabel();
        jSeparator21 = new javax.swing.JSeparator();
        cargarCancionesDiscoInput = new javax.swing.JTextField();
        cargarCancionesDiscoBtn = new javax.swing.JButton();
        consultasTab = new javax.swing.JPanel();
        jSeparator17 = new javax.swing.JSeparator();
        cancionesPorGeneroLabel = new javax.swing.JLabel();
        jSeparator18 = new javax.swing.JSeparator();
        cancionesPorCantanteLabel = new javax.swing.JLabel();
        cancionPorGeneroInput = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        cancionPorGeneroList = new javax.swing.JList<>();
        cancionPorCantanteInput = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        cancionPorCantanteList = new javax.swing.JList<>();
        botonConsultarCancionesCantante = new javax.swing.JButton();
        botonConsultarCancionesGenero = new javax.swing.JButton();
        listadosTab = new javax.swing.JPanel();
        locutoresDeEmisoraLabel = new javax.swing.JLabel();
        jSeparator19 = new javax.swing.JSeparator();
        programasDeEmisoraLabel = new javax.swing.JLabel();
        jSeparator20 = new javax.swing.JSeparator();
        jScrollPane9 = new javax.swing.JScrollPane();
        locutoresDeEmisoraList = new javax.swing.JList<>();
        jScrollPane10 = new javax.swing.JScrollPane();
        programasDeEmisoraList = new javax.swing.JList<>();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        menu3.setLabel("File");
        menuBar2.add(menu3);

        menu4.setLabel("Edit");
        menuBar2.add(menu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nombreLabel.setText("Nombre:");

        frecuenciaLabel.setText("Frecuencia:");

        urlLabel.setText("URL:");

        direccionFisicaLabel.setText("Dirección Física:");

        nombreEmisoraShow.setText("INDEFINIDO");

        frecuenciaEmisoraShow.setText("INDEFINIDO");

        urlEmisoraShow.setText("INDEFINIDO");

        direccionFisicaEmisoraShow.setText("INDEFINIDO");

        nuevoNombreLabel.setText("Nuevo Nombre:");

        nuevaFrecuenciaLabel.setText("Nueva Frecuencia:");

        nuevoUrlLabel.setText("Nuevo URL:");

        nuevaDireccionFisicaLabel.setText("Nueva Dirección Física:");

        nombreEmisoraInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreEmisoraInputActionPerformed(evt);
            }
        });

        urlEmisoraInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlEmisoraInputActionPerformed(evt);
            }
        });

        direccionFisicaInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                direccionFisicaInputActionPerformed(evt);
            }
        });

        btnActualizarEmisora.setText("Actualizar Información");
        btnActualizarEmisora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarEmisoraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout radioEmisoraTabLayout = new javax.swing.GroupLayout(radioEmisoraTab);
        radioEmisoraTab.setLayout(radioEmisoraTabLayout);
        radioEmisoraTabLayout.setHorizontalGroup(
            radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(radioEmisoraTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnActualizarEmisora, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(radioEmisoraTabLayout.createSequentialGroup()
                        .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nombreLabel)
                            .addComponent(frecuenciaLabel)
                            .addComponent(urlLabel)
                            .addComponent(direccionFisicaLabel))
                        .addGap(60, 60, 60)
                        .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(direccionFisicaEmisoraShow)
                            .addComponent(urlEmisoraShow)
                            .addComponent(frecuenciaEmisoraShow)
                            .addComponent(nombreEmisoraShow))
                        .addGap(0, 728, Short.MAX_VALUE))
                    .addGroup(radioEmisoraTabLayout.createSequentialGroup()
                        .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nuevaDireccionFisicaLabel)
                            .addComponent(nuevoUrlLabel)
                            .addComponent(nuevaFrecuenciaLabel)
                            .addComponent(nuevoNombreLabel))
                        .addGap(25, 25, 25)
                        .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nombreEmisoraInput)
                            .addComponent(frecuenciaEmisoraInput)
                            .addComponent(urlEmisoraInput)
                            .addComponent(direccionFisicaInput))))
                .addContainerGap())
        );
        radioEmisoraTabLayout.setVerticalGroup(
            radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(radioEmisoraTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreLabel)
                    .addComponent(nombreEmisoraShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frecuenciaLabel)
                    .addComponent(frecuenciaEmisoraShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlLabel)
                    .addComponent(urlEmisoraShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(direccionFisicaLabel)
                    .addComponent(direccionFisicaEmisoraShow))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevoNombreLabel)
                    .addComponent(nombreEmisoraInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevaFrecuenciaLabel)
                    .addComponent(frecuenciaEmisoraInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevoUrlLabel)
                    .addComponent(urlEmisoraInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(radioEmisoraTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevaDireccionFisicaLabel)
                    .addComponent(direccionFisicaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnActualizarEmisora, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(321, Short.MAX_VALUE))
        );

        windowTabs.addTab("RadioEmisora", radioEmisoraTab);

        jScrollPane1.setViewportView(listaLocutoresBox);

        nuevoLocutorLabel.setText("Agregar Nuevo Locutor");

        listaLocutoresLabel.setText("Lista de locutores:");

        IdLocutorLabel.setText("Id:");

        nombreLocutorLabel.setText("Nombre:");

        correoLocutorLabel.setText("Correo:");

        telefonoLocutorLabel.setText("Telefono:");

        direccionLocutorLabel.setText("Dirección:");

        sexoLocutorLabel.setText("Sexo:");

        fechaLocutorLabel.setText("Fecha de nacimiento:");

        locutorNombreInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locutorNombreInputActionPerformed(evt);
            }
        });

        locutorCorreoInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locutorCorreoInputActionPerformed(evt);
            }
        });

        locutorTelefonoInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locutorTelefonoInputActionPerformed(evt);
            }
        });

        botonAgregarLocutor.setText("Agregar Nuevo Locutor");
        botonAgregarLocutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarLocutorActionPerformed(evt);
            }
        });

        actualizarLocutorLabel.setText("Actualizar Locutor:");

        locutoresActualizarCombo.setModel(this.locutoresComboBoxModel);
        locutoresActualizarCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locutoresActualizarComboActionPerformed(evt);
            }
        });

        botonVerInfoLocutor.setText("Ver Información");
        botonVerInfoLocutor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonVerInfoLocutorMouseClicked(evt);
            }
        });
        botonVerInfoLocutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerInfoLocutorActionPerformed(evt);
            }
        });

        jLabel3.setText("ID:");

        javax.swing.GroupLayout locutoresTabLayout = new javax.swing.GroupLayout(locutoresTab);
        locutoresTab.setLayout(locutoresTabLayout);
        locutoresTabLayout.setHorizontalGroup(
            locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locutoresTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(locutoresTabLayout.createSequentialGroup()
                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(actualizarLocutorLabel)
                            .addComponent(jLabel3))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, locutoresTabLayout.createSequentialGroup()
                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(locutoresTabLayout.createSequentialGroup()
                                .addComponent(locutoresActualizarCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonVerInfoLocutor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, locutoresTabLayout.createSequentialGroup()
                                .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(botonAgregarLocutor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(locutoresTabLayout.createSequentialGroup()
                                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nombreLocutorLabel)
                                            .addComponent(IdLocutorLabel)
                                            .addComponent(correoLocutorLabel)
                                            .addComponent(telefonoLocutorLabel)
                                            .addComponent(direccionLocutorLabel)
                                            .addComponent(sexoLocutorLabel)
                                            .addComponent(fechaLocutorLabel))
                                        .addGap(60, 60, 60)
                                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(locutorIdInput, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(locutorNombreInput, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(locutorCorreoInput, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(locutorTelefonoInput, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(locutorDireccionInput, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(locutorSexoInput, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(locutorFechaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 91, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(locutoresTabLayout.createSequentialGroup()
                        .addComponent(nuevoLocutorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(listaLocutoresLabel)
                        .addGap(278, 278, 278))))
        );
        locutoresTabLayout.setVerticalGroup(
            locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locutoresTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevoLocutorLabel)
                    .addComponent(listaLocutoresLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(locutoresTabLayout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nombreLocutorLabel)
                            .addComponent(locutorNombreInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(IdLocutorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(locutorIdInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(correoLocutorLabel)
                            .addComponent(locutorCorreoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(telefonoLocutorLabel)
                            .addComponent(locutorTelefonoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(direccionLocutorLabel)
                            .addComponent(locutorDireccionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sexoLocutorLabel)
                            .addComponent(locutorSexoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fechaLocutorLabel)
                            .addComponent(locutorFechaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(botonAgregarLocutor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actualizarLocutorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(locutoresTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locutoresActualizarCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonVerInfoLocutor))
                .addContainerGap(212, Short.MAX_VALUE))
        );

        windowTabs.addTab("Locutores", locutoresTab);

        nuevaPlaylistLabel.setText("Agregar Nueva Playlist");

        playlistNombre.setText("Nombre:");

        playlistNombreInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistNombreInputActionPerformed(evt);
            }
        });

        botonAgregarPlaylist.setText("Agregar Playlist");
        botonAgregarPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarPlaylistActionPerformed(evt);
            }
        });

        playlistsListaPlaylistsBox.setModel(this.playlistListModel);
        jScrollPane3.setViewportView(playlistsListaPlaylistsBox);

        listaPlaylistsLabel.setText("Lista de Playlists:");

        verCancionesPlaylistLabel.setText("Ver Canciones:");

        playlistsCombo.setModel(this.playlistComboBoxModel);
        playlistsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistsComboActionPerformed(evt);
            }
        });

        playlistsListaCancionesBox.setModel(this.cancionesEnPlaylistListModel);
        jScrollPane4.setViewportView(playlistsListaCancionesBox);

        playlistsProgramaLabel.setText("Programa:");

        playlistProgramaComboBox.setModel(this.programasComboBoxModel);

        javax.swing.GroupLayout playlistsTabLayout = new javax.swing.GroupLayout(playlistsTab);
        playlistsTab.setLayout(playlistsTabLayout);
        playlistsTabLayout.setHorizontalGroup(
            playlistsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playlistsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nuevaPlaylistLabel)
                    .addComponent(jSeparator5)
                    .addComponent(botonAgregarPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(verCancionesPlaylistLabel)
                    .addComponent(jSeparator7)
                    .addComponent(playlistsCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playlistsTabLayout.createSequentialGroup()
                        .addGroup(playlistsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playlistNombre)
                            .addComponent(playlistsProgramaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(playlistsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(playlistNombreInput, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                            .addComponent(playlistProgramaComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(playlistsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                    .addGroup(playlistsTabLayout.createSequentialGroup()
                        .addComponent(listaPlaylistsLabel)
                        .addGap(0, 523, Short.MAX_VALUE)))
                .addContainerGap())
        );
        playlistsTabLayout.setVerticalGroup(
            playlistsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playlistsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevaPlaylistLabel)
                    .addComponent(listaPlaylistsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playlistsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playlistsTabLayout.createSequentialGroup()
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(playlistsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playlistsProgramaLabel)
                            .addComponent(playlistProgramaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(playlistsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playlistNombre)
                            .addComponent(playlistNombreInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(botonAgregarPlaylist)
                        .addGap(18, 18, 18)
                        .addComponent(verCancionesPlaylistLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playlistsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        windowTabs.addTab("Playlists", playlistsTab);

        discoNombreLabel.setText("Nombre:");

        cantanteDiscoLabel.setText("Cantante: ");

        generoDiscoLabel.setText("Genero: ");

        anioDiscoLabel.setText("Año: ");

        anioDiscoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anioDiscoTextFieldActionPerformed(evt);
            }
        });
        anioDiscoTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                anioDiscoTextFieldKeyTyped(evt);
            }
        });

        ubicacionDiscoLabel.setText("Ubicacion: ");

        imagenDiscoLabel.setText("Imagen: ");

        jScrollPane5.setViewportView(discosListaBox);

        listaDiscoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaDiscoComboBoxActionPerformed(evt);
            }
        });

        botonCrearDisco.setText("Crear disco");
        botonCrearDisco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCrearDiscoActionPerformed(evt);
            }
        });

        botonVerDisco.setText("Ver informacion");
        botonVerDisco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerDiscoActionPerformed(evt);
            }
        });

        listaDiscosLabel.setText("Lista de discos:");

        jLabel4.setText("Actualizar disco:");

        javax.swing.GroupLayout discosTabLayout = new javax.swing.GroupLayout(discosTab);
        discosTab.setLayout(discosTabLayout);
        discosTabLayout.setHorizontalGroup(
            discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discosTabLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(discosTabLayout.createSequentialGroup()
                        .addComponent(listaDiscoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonVerDisco)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(discosTabLayout.createSequentialGroup()
                        .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator12, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, discosTabLayout.createSequentialGroup()
                                .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ubicacionDiscoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(generoDiscoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(discoNombreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cantanteDiscoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(anioDiscoLabel))
                                    .addComponent(imagenDiscoLabel))
                                .addGap(27, 27, 27)
                                .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(imagenDiscoTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                    .addComponent(cantanteDiscoTextField)
                                    .addComponent(nombreDiscoTextField)
                                    .addComponent(generoDiscoTextField)
                                    .addComponent(anioDiscoTextField)
                                    .addComponent(ubicacionDiscoTextField)))
                            .addComponent(botonCrearDisco, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(discosTabLayout.createSequentialGroup()
                                .addComponent(listaDiscosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(discosTabLayout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                                .addGap(59, 59, 59))))))
        );
        discosTabLayout.setVerticalGroup(
            discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(discosTabLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(listaDiscosLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(discosTabLayout.createSequentialGroup()
                        .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(discoNombreLabel)
                            .addComponent(nombreDiscoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cantanteDiscoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cantanteDiscoLabel))
                        .addGap(18, 18, 18)
                        .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(generoDiscoLabel)
                            .addComponent(generoDiscoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(anioDiscoLabel)
                            .addComponent(anioDiscoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ubicacionDiscoLabel)
                            .addComponent(ubicacionDiscoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(imagenDiscoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imagenDiscoLabel)))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(botonCrearDisco)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(3, 3, 3)
                .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(discosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaDiscoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonVerDisco))
                .addContainerGap(227, Short.MAX_VALUE))
        );

        windowTabs.addTab("Disco", discosTab);

        nuevoProgramaLabel.setText("Agregar Nuevo Programa:");

        programaNombreLabel.setText("Nombre: ");

        programaHorarioLabel.setText("Horario:");

        programasDuracionLabel.setText("Duración:");

        jLabel1.setText("Genero:");

        programaNombreInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programaNombreInputActionPerformed(evt);
            }
        });

        programaHorarioInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programaHorarioInputActionPerformed(evt);
            }
        });

        programaDuracionInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programaDuracionInputActionPerformed(evt);
            }
        });
        programaDuracionInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                programaDuracionInputKeyTyped(evt);
            }
        });

        botonCrearNuevoPrograma.setText("Agregar Progama");
        botonCrearNuevoPrograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCrearNuevoProgramaActionPerformed(evt);
            }
        });

        programasListaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programasListaComboActionPerformed(evt);
            }
        });

        programaAsignarLocutorLabel.setText("Asignar Locutor a Programa:");

        programasLocutoresCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programasLocutoresComboActionPerformed(evt);
            }
        });

        botonAsignarLocutor.setText("Asignar Locutor");
        botonAsignarLocutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAsignarLocutorActionPerformed(evt);
            }
        });

        programasListaLabel.setText("Lista de Programas:");

        jScrollPane2.setViewportView(programasListaProgramasBox);

        actualizarProgramaLabel.setText("Actualizar programa");

        verInformacionProgramaBtn.setText("Ver informacion");
        verInformacionProgramaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verInformacionProgramaBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Programas:");

        jLabel6.setText("Locutores:");

        javax.swing.GroupLayout programasTabLayout = new javax.swing.GroupLayout(programasTab);
        programasTab.setLayout(programasTabLayout);
        programasTabLayout.setHorizontalGroup(
            programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(programasTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(programasTabLayout.createSequentialGroup()
                        .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(programasTabLayout.createSequentialGroup()
                                .addComponent(programaNombreLabel)
                                .addGap(31, 31, 31)
                                .addComponent(programaNombreInput, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, programasTabLayout.createSequentialGroup()
                                .addComponent(programaHorarioLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(programaHorarioInput, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(programasTabLayout.createSequentialGroup()
                                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(programasDuracionLabel)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(programasGeneroInput, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(programaDuracionInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)))
                            .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(nuevoProgramaLabel)
                                .addGroup(programasTabLayout.createSequentialGroup()
                                    .addComponent(actualizarProgramaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                                    .addComponent(jSeparator10, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE)))
                            .addComponent(botonCrearNuevoPrograma, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(programasTabLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(programasListaLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(programasTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE))))
                    .addGroup(programasTabLayout.createSequentialGroup()
                        .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(programasTabLayout.createSequentialGroup()
                                .addComponent(actualizarProgramasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(verInformacionProgramaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(programasTabLayout.createSequentialGroup()
                                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(programasListaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(49, 49, 49)
                                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(programasLocutoresCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)))
                            .addComponent(botonAsignarLocutor, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(programasTabLayout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(programaAsignarLocutorLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        programasTabLayout.setVerticalGroup(
            programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(programasTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevoProgramaLabel)
                    .addComponent(programasListaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(programasTabLayout.createSequentialGroup()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(programaNombreInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(programaNombreLabel))
                        .addGap(34, 34, 34)
                        .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(programaHorarioInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(programaHorarioLabel))
                        .addGap(33, 33, 33)
                        .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(programasDuracionLabel)
                            .addComponent(programaDuracionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(programasGeneroInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(31, 31, 31)
                        .addComponent(botonCrearNuevoPrograma)
                        .addGap(0, 68, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(30, 30, 30)
                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualizarProgramaLabel))
                .addGap(4, 4, 4)
                .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actualizarProgramasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verInformacionProgramaBtn))
                .addGap(10, 10, 10)
                .addComponent(programaAsignarLocutorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(programasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(programasListaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(programasLocutoresCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(botonAsignarLocutor)
                .addContainerGap())
        );

        windowTabs.addTab("Programas", programasTab);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setText("Canciones de archivos");

        cancionArchivoAlbumLabel.setText("Album");

        cancionArchivoNombreLabel.setText("Nombre");

        cancionArchivoNombreInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancionArchivoNombreInputActionPerformed(evt);
            }
        });

        cancionArchivoCantanteLabel.setText("Cantante");

        cancionArchivoDuracionLabel.setText("Duracion");

        cancionArchivoDuracionInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cancionArchivoDuracionInputKeyTyped(evt);
            }
        });

        cancionArchivoGeneroLabel.setText("Genero");

        cancionArchivoPathLabel.setText("Path");

        actualizarCancionArchivoLabel.setText("Actualizar cancion");

        verInformacionCancionArchivoBtn.setText("Ver Informacion");
        verInformacionCancionArchivoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verInformacionCancionArchivoBtnActionPerformed(evt);
            }
        });

        agregarCancionArchivoBtn.setText("Agregar Cancion");
        agregarCancionArchivoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarCancionArchivoBtnActionPerformed(evt);
            }
        });

        cargarCancionesArchivoLabel.setText("Cargar canciones");

        cargarCancionesArchivoBtn.setText("Cargar canciones");
        cargarCancionesArchivoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarCancionesArchivoBtnActionPerformed(evt);
            }
        });

        jScrollPane11.setViewportView(cancionesArchivoList);

        javax.swing.GroupLayout cancionesTabLayout = new javax.swing.GroupLayout(cancionesTab);
        cancionesTab.setLayout(cancionesTabLayout);
        cancionesTabLayout.setHorizontalGroup(
            cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cancionesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actualizarCancionArchivoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregarCancionArchivoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(verInformacionCancionArchivoBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                        .addComponent(actualizarCancionArchivoComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(cancionesTabLayout.createSequentialGroup()
                        .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane11)
                            .addGroup(cancionesTabLayout.createSequentialGroup()
                                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cancionArchivoAlbumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cancionArchivoNombreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cancionArchivoCantanteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(cancionesTabLayout.createSequentialGroup()
                                        .addComponent(cancionArchivoAlbumInput, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(83, 83, 83)
                                        .addComponent(cancionArchivoDuracionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cancionArchivoDuracionInput, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(cancionesTabLayout.createSequentialGroup()
                                        .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cancionArchivoNombreInput, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cancionArchivoCantanteInput, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(83, 83, 83)
                                        .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cargarCancionesArchivoLabel)
                                            .addGroup(cancionesTabLayout.createSequentialGroup()
                                                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(cancionArchivoGeneroLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                                                    .addComponent(cancionArchivoPathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(18, 18, 18)
                                                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(cancionArchivoGeneroInput, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                                                    .addComponent(cancionArchivoPathInput)))
                                            .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cargarCancionesArchivoPathInput)
                                            .addComponent(cargarCancionesArchivoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cancionesTabLayout.setVerticalGroup(
            cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cancionesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancionArchivoAlbumLabel)
                    .addComponent(cancionArchivoAlbumInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancionArchivoDuracionLabel)
                    .addComponent(cancionArchivoDuracionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancionArchivoNombreInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancionArchivoNombreLabel)
                    .addComponent(cancionArchivoGeneroLabel)
                    .addComponent(cancionArchivoGeneroInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancionArchivoCantanteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancionArchivoCantanteLabel)
                    .addComponent(cancionArchivoPathLabel)
                    .addComponent(cancionArchivoPathInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(agregarCancionArchivoBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actualizarCancionArchivoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cargarCancionesArchivoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cargarCancionesArchivoPathInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualizarCancionArchivoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cancionesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cargarCancionesArchivoBtn)
                    .addComponent(verInformacionCancionArchivoBtn))
                .addContainerGap(179, Short.MAX_VALUE))
        );

        windowTabs.addTab("Canciones Archivos", cancionesTab);

        nombreCancionLabel.setText("Nombre: ");

        generoCancionLabel.setText("Genero: ");

        duracionCancionLabel.setText("Duración: ");

        cantanteCancionLabel.setText("Cantante: ");

        nombreCancionInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreCancionInputActionPerformed(evt);
            }
        });

        duracionCancionInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duracionCancionInputActionPerformed(evt);
            }
        });
        duracionCancionInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                duracionCancionInputKeyTyped(evt);
            }
        });

        discoCancionLabel.setText("Disco:");

        botonAgregarCancion.setText("Agregar Cancion");
        botonAgregarCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarCancionActionPerformed(evt);
            }
        });

        seleccionarDiscoComboBox.setModel(this.discoCancionComboBoxModel);
        seleccionarDiscoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarDiscoComboBoxActionPerformed(evt);
            }
        });

        jScrollPane6.setViewportView(listaCanciones);

        seleccionarDiscoLabel.setText("Seleccionar Disco para ver canciones:");

        agregarCancionLabel.setText("Agregar Canción:");

        editarCancionBtn.setText("Ver Información");
        editarCancionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarCancionBtnActionPerformed(evt);
            }
        });

        cargarCancionesDiscoLabel.setText("Cargar canciones para el disco");

        cargarCancionesDiscoBtn.setText("Cargar canciones");
        cargarCancionesDiscoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarCancionesDiscoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator21, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cargarCancionesDiscoBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cargarCancionesDiscoInput, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(generoCancionLabel)
                                            .addComponent(duracionCancionLabel)
                                            .addComponent(cantanteCancionLabel)
                                            .addComponent(discoCancionLabel)
                                            .addComponent(nombreCancionLabel))
                                        .addGap(62, 62, 62)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(discoCancionCombo, 0, 197, Short.MAX_VALUE)
                                            .addComponent(nombreCancionInput)
                                            .addComponent(generoCancionInput)
                                            .addComponent(duracionCancionInput)
                                            .addComponent(cantanteCancionInput)))
                                    .addComponent(jSeparator15, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(botonAgregarCancion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(agregarCancionLabel)
                                .addComponent(cargarCancionesDiscoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(seleccionarDiscoLabel)
                            .addComponent(jScrollPane6)
                            .addComponent(seleccionarDiscoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator16)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(seleccionarCancionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editarCancionBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)))
                        .addGap(49, 49, 49))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(seleccionarDiscoLabel)
                    .addComponent(agregarCancionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator15, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator16, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nombreCancionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nombreCancionLabel))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(generoCancionLabel)
                            .addComponent(generoCancionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(duracionCancionLabel)
                            .addComponent(duracionCancionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cantanteCancionLabel)
                            .addComponent(cantanteCancionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(discoCancionLabel)
                            .addComponent(discoCancionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(botonAgregarCancion)
                        .addGap(80, 80, 80))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(seleccionarDiscoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seleccionarCancionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editarCancionBtn)
                            .addComponent(cargarCancionesDiscoLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator21, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cargarCancionesDiscoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cargarCancionesDiscoBtn)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        windowTabs.addTab("Canciones disco", jPanel1);

        cancionesPorGeneroLabel.setText("Consultar Canciones por Género:");

        cancionesPorCantanteLabel.setText("Consultar Canciones por Cantante:");

        cancionPorGeneroInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancionPorGeneroInputActionPerformed(evt);
            }
        });

        cancionPorGeneroList.setModel(this.cancionesPorGenero);
        jScrollPane7.setViewportView(cancionPorGeneroList);

        cancionPorCantanteList.setModel(this.cancionesPorCantante);
        jScrollPane8.setViewportView(cancionPorCantanteList);

        botonConsultarCancionesCantante.setText("Buscar");
        botonConsultarCancionesCantante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConsultarCancionesCantanteActionPerformed(evt);
            }
        });

        botonConsultarCancionesGenero.setText("Buscar");
        botonConsultarCancionesGenero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConsultarCancionesGeneroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout consultasTabLayout = new javax.swing.GroupLayout(consultasTab);
        consultasTab.setLayout(consultasTabLayout);
        consultasTabLayout.setHorizontalGroup(
            consultasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consultasTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(consultasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancionesPorGeneroLabel)
                    .addComponent(jScrollPane7)
                    .addGroup(consultasTabLayout.createSequentialGroup()
                        .addComponent(cancionPorGeneroInput, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonConsultarCancionesGenero, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                    .addComponent(jSeparator17))
                .addGap(52, 52, 52)
                .addGroup(consultasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8)
                    .addGroup(consultasTabLayout.createSequentialGroup()
                        .addComponent(cancionPorCantanteInput, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonConsultarCancionesCantante, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                    .addComponent(jSeparator18)
                    .addGroup(consultasTabLayout.createSequentialGroup()
                        .addComponent(cancionesPorCantanteLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        consultasTabLayout.setVerticalGroup(
            consultasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consultasTabLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(consultasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancionesPorGeneroLabel)
                    .addComponent(cancionesPorCantanteLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(consultasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator17)
                    .addComponent(jSeparator18, javax.swing.GroupLayout.DEFAULT_SIZE, 10, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(consultasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancionPorGeneroInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancionPorCantanteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonConsultarCancionesCantante)
                    .addComponent(botonConsultarCancionesGenero))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(consultasTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                    .addComponent(jScrollPane7))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        windowTabs.addTab("Consultas", consultasTab);

        locutoresDeEmisoraLabel.setText("Locutores de la emisora:");

        programasDeEmisoraLabel.setText("Programas de la emisora:");

        locutoresDeEmisoraList.setModel(this.locutoresDeEmisoraListModel);
        jScrollPane9.setViewportView(locutoresDeEmisoraList);

        programasDeEmisoraList.setModel(this.programasDeEmisoraListModel
        );
        jScrollPane10.setViewportView(programasDeEmisoraList);

        javax.swing.GroupLayout listadosTabLayout = new javax.swing.GroupLayout(listadosTab);
        listadosTab.setLayout(listadosTabLayout);
        listadosTabLayout.setHorizontalGroup(
            listadosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listadosTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listadosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                    .addComponent(locutoresDeEmisoraLabel)
                    .addComponent(jSeparator19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addGroup(listadosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(programasDeEmisoraLabel)
                    .addComponent(jSeparator20)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                .addContainerGap())
        );
        listadosTabLayout.setVerticalGroup(
            listadosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listadosTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listadosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locutoresDeEmisoraLabel)
                    .addComponent(programasDeEmisoraLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listadosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator19, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator20, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listadosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addComponent(jScrollPane9))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        windowTabs.addTab("Listados", listadosTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(windowTabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(windowTabs, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Activa los tabs de las ventas o las desactiva
     *
     * @param activar
     */
    private void toggleWindowTabs(boolean activar) {
        for (int i = 1; i < this.windowTabs.getTabCount(); i++) {
            this.windowTabs.setEnabledAt(i, activar);
        }
    }

    private void nombreEmisoraInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreEmisoraInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreEmisoraInputActionPerformed

    private void urlEmisoraInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlEmisoraInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_urlEmisoraInputActionPerformed

    private void direccionFisicaInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_direccionFisicaInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_direccionFisicaInputActionPerformed
   
    /**
     * Evento para actualizar la informacion de la radio emisora Las ventanillas
     * se abilitaran hasta que la informacion se ingrese
     *
     * @param evt Evento realizado a la hora de presionar el boton
     */
    private void btnActualizarEmisoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarEmisoraActionPerformed

        String nombre = this.nombreEmisoraInput.getText().trim();
        String url = this.urlEmisoraInput.getText().trim();
        String frecuencia = this.frecuenciaEmisoraInput.getText().trim();
        String direccion = this.direccionFisicaInput.getText().trim();

        // Validacion
        if (nombre.isEmpty() || url.isEmpty()
                || frecuencia.isEmpty() || direccion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Datos invalidos...", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else { // Crea la emisora
            emisora.setNombre(nombre);
            emisora.setFrecuencia(frecuencia);
            emisora.setUrlSitioWeb(url);
            emisora.setDireccionFisica(direccion);

            this.direccionFisicaEmisoraShow.setText(emisora.getDireccionFisica());
            this.frecuenciaEmisoraShow.setText(emisora.getFrecuencia());
            this.nombreEmisoraShow.setText(emisora.getNombre());
            this.urlEmisoraShow.setText(emisora.getUrlSitioWeb());

            this.toggleWindowTabs(true);

            // Se deshace del texto en los inputs
            this.frecuenciaEmisoraInput.setText("");
            this.direccionFisicaInput.setText("");
            this.nombreEmisoraInput.setText("");
            this.urlEmisoraInput.setText("");

            JOptionPane.showMessageDialog(this, "Emisora actualizada...", "Exito", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarEmisoraActionPerformed

    private void locutorNombreInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locutorNombreInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locutorNombreInputActionPerformed

    private void locutorCorreoInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locutorCorreoInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locutorCorreoInputActionPerformed

    private void locutorTelefonoInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locutorTelefonoInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locutorTelefonoInputActionPerformed

    /**
     * Realiza la accion para agregar los datos de un locutor nuevo
     *
     * @param evt Evento realizado a la hora de presionar el boton
     */
    private void botonAgregarLocutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarLocutorActionPerformed
        String id = this.locutorIdInput.getText().trim();
        String nombre = this.locutorNombreInput.getText().trim();
        String correo = this.locutorCorreoInput.getText().trim();
        String telefono = this.locutorTelefonoInput.getText().trim();
        String direccion = this.locutorDireccionInput.getText().trim();
        String sexo = this.locutorSexoInput.getText().trim();
        String fecha = this.locutorFechaInput.getText().trim();

        // Verificaciones
        if (id.isEmpty() || nombre.isEmpty() || correo.isEmpty()
                || telefono.isEmpty() || direccion.isEmpty() || sexo.isEmpty()
                || fecha.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Datos invalidos...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Locutor locutorNuevo = new Locutor(id, nombre, correo, telefono, direccion, sexo, fecha);
        if (!locutorNuevo.telefonoValido()) {
            JOptionPane.showMessageDialog(this, "Telefono invalido...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!locutorNuevo.correoValido()) {
            JOptionPane.showMessageDialog(this, "Correo invalido...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (this.emisora.verificarCedulaRepetida(locutorNuevo.getId())) {
            JOptionPane.showMessageDialog(this, "ID repetido...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Agrega al locutor
        this.emisora.agregarLocutor(locutorNuevo);

        this.locutoresActualizarCombo.setModel(this.locutoresComboBoxModel);
        this.listaLocutoresBox.setModel(this.locutoresListModel);

        // Agrega la informacion de los locutores a los lugares indicados
        this.locutoresComboBoxModel.addElement(locutorNuevo.getId());
        this.locutoresListModel.addElement("-Nombre: " + locutorNuevo.getNombre() + "  "
                + "-ID: " + locutorNuevo.getId());
        this.locutoresProgramasComboBoxModel.addElement(id);
        this.locutoresDeEmisoraListModel.addElement("Nombre: " + locutorNuevo.getNombre()
                + " | ID: " + locutorNuevo.getId()
                + " | Correo: " + locutorNuevo.getCorreo()
                + " | Telefono: " + locutorNuevo.getTelefono()
                + " | Direccion: " + locutorNuevo.getDireccion()
                + " | Sexo: " + locutorNuevo.getSexo()
                + " | Fecha de Nacimiento: " + locutorNuevo.getFecha());

        // Vacia el texto de cada casilla de input
        this.locutorNombreInput.setText("");
        this.locutorIdInput.setText("");
        this.locutorTelefonoInput.setText("");
        this.locutorCorreoInput.setText("");
        this.locutorSexoInput.setText("");
        this.locutorDireccionInput.setText("");
        this.locutorFechaInput.setText("");

        JOptionPane.showMessageDialog(this, "Locutor agregado...", "Exito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_botonAgregarLocutorActionPerformed

    private void locutoresActualizarComboActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void programaHorarioInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programaHorarioInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_programaHorarioInputActionPerformed

    private void programaDuracionInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programaDuracionInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_programaDuracionInputActionPerformed

    /**
     * Crea un programa y lo muestra en pantalla
     *
     * @param evt Evento realizado a la hora de presionar el boton
     */
    private void botonCrearNuevoProgramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCrearNuevoProgramaActionPerformed
        String nombre = this.programaNombreInput.getText().trim();
        String horario = this.programaHorarioInput.getText().trim();
        String duracionStr = this.programaDuracionInput.getText().trim();
        String genero = this.programasGeneroInput.getText().trim();

        // Verificaciones
        if (nombre.isEmpty() || horario.isEmpty() || duracionStr.isEmpty()
                || genero.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Datos invalidos...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (this.emisora.verificarNombreProgramaRepetido(nombre)) {
            JOptionPane.showMessageDialog(this, "Ya existe un programa con ese nombre...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int duracion = Integer.parseInt(duracionStr);

        if (duracion < 5) {
            JOptionPane.showMessageDialog(this, "El programa debe durar más de 5 minutos...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Agrega el nuevo locutor
        Programa programaNuevo = new Programa(nombre, horario, duracion, genero);
        this.emisora.agregarPrograma(programaNuevo);

        // Agrega el programa a la Lista y el comboBox respectivo
        this.programasListModel.addElement(programaNuevo.getNombre()
                + " |Genero: " + programaNuevo.getGenero() + " |Locutor: SIN ASIGNAR");
        this.programasComboBoxModel.addElement(programaNuevo.getNombre());

        this.programasDeEmisoraListModel.addElement("Nombre: " + programaNuevo.getNombre()
                + " | Horario: " + programaNuevo.getHorario()
                + " | Duracion: " + programaNuevo.getDuracion()
                + " | Genero: " + programaNuevo.getGenero());

        // Vacia el texto de cada casilla de input
        this.programasGeneroInput.setText("");
        this.programaDuracionInput.setText("");
        this.programaHorarioInput.setText("");
        this.programaNombreInput.setText("");

        JOptionPane.showMessageDialog(this, "Programa creado...", "Exito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_botonCrearNuevoProgramaActionPerformed

    private void programasListaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programasListaComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_programasListaComboActionPerformed

    /**
     * Asiga un locutor seleccionado al programa
     *
     * @param evt Evento realizado a la hora de presionar el boton
     */
    private void botonAsignarLocutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAsignarLocutorActionPerformed

        if (this.emisora.getLocutores().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay locutores creados...", "Error...", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (this.emisora.getProgramas().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay locutores creados...", "Error...", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String idLocutor = (String) programasLocutoresCombo.getSelectedItem();
        Locutor locutorSeleccionado = this.emisora.getLocutorPorId(idLocutor);

        String nombrePrograma = (String) programasListaCombo.getSelectedItem();
        Programa programaSeleccionado = this.emisora.obtenerProgramaPorNombre(nombrePrograma);

        if (programaSeleccionado.getLocutor() == null) { // Revisa si el programa tiene locutor asignado

            this.programasListModel.removeElement(programaSeleccionado.getNombre()
                    + " |Genero: " + programaSeleccionado.getGenero()
                    + " |Locutor: SIN ASIGNAR");

        } else { // El id del locutor existe

            this.programasListModel.removeElement(programaSeleccionado.getNombre()
                    + " |Genero: " + programaSeleccionado.getGenero()
                    + " |Locutor: " + programaSeleccionado.getLocutor().getNombre());
        }

        programaSeleccionado.setLocutor(locutorSeleccionado);

        this.programasListModel.addElement(programaSeleccionado.getNombre()
                + " |Genero: " + programaSeleccionado.getGenero()
                + " |Locutor: " + locutorSeleccionado.getNombre());
        JOptionPane.showMessageDialog(this, "Se ha asignado el locutor al programa.", "Exito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_botonAsignarLocutorActionPerformed

    private void programasLocutoresComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programasLocutoresComboActionPerformed

    }//GEN-LAST:event_programasLocutoresComboActionPerformed

    private void playlistNombreInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playlistNombreInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playlistNombreInputActionPerformed
    /**
     * Despliega la información del locutor seleccionado para actualizarla
     *
     * @param evt Evento para el click del boton
     */
    private void botonVerInfoLocutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerInfoLocutorActionPerformed

        // Validacion
        if (this.emisora.getLocutores().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay locutores creados...", "Error...", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Desabilita el boton de ver info temporalmente
        this.botonVerInfoLocutor.setEnabled(false);
        String idLocutor = (String) locutoresActualizarCombo.getSelectedItem();
        Locutor locutorSeleccionado = this.emisora.getLocutorPorId(idLocutor);

        // SE TIENE QUE CARGAR OTRA VENTANA
        InformacionLocutor ventanaInformacion = new InformacionLocutor(this.botonVerInfoLocutor,
                locutorSeleccionado, this.emisora, this.locutoresListModel,
                this.locutoresComboBoxModel, this.locutoresProgramasComboBoxModel,
                this.programasListModel, this.locutoresDeEmisoraListModel);
        ventanaInformacion.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        ventanaInformacion.setVisible(true);
    }//GEN-LAST:event_botonVerInfoLocutorActionPerformed

    private void botonVerInfoLocutorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonVerInfoLocutorMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_botonVerInfoLocutorMouseClicked
        /**
         * Permite unicamente digitar numeros en el input de la duración del programa.
         * @param evt Evento realizado a la hora de digitar 
         */
    private void programaDuracionInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_programaDuracionInputKeyTyped
        this.digitarNumeros(evt);
    }//GEN-LAST:event_programaDuracionInputKeyTyped
        /**
         * Crea un disco nuevo con los datos indicados por el usuario
         * @param evt Evento que se activa a la hora de presionar el boton
         */
    private void botonCrearDiscoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCrearDiscoActionPerformed
        String nombre = this.nombreDiscoTextField.getText().trim();
        String cantante = this.cantanteDiscoTextField.getText().trim();
        String genero = this.generoDiscoTextField.getText().trim();
        String anioStr = this.anioDiscoTextField.getText().trim();
        String ubicacion = this.ubicacionDiscoTextField.getText().trim();
        String imagen = this.imagenDiscoTextField.getText().trim();

        ArrayList<Disco> discos = this.emisora.getDiscos();

        if (nombre.isEmpty() || cantante.isEmpty() || genero.isEmpty() || anioStr.isEmpty()
                || ubicacion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Datos incorrectos...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (Disco discoComprobar : discos) {
            if (discoComprobar.getNombre().equals(nombre)) {
                JOptionPane.showMessageDialog(this, "Datos incorrectos...", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        int anio = Integer.parseInt(anioStr);
        Disco discoNuevo = new Disco(nombre, cantante, genero, anio, ubicacion, imagen);

        this.emisora.agregarDisco(discoNuevo);
        this.discosListModel.addElement(discoNuevo.getNombre() + " - " + discoNuevo.getGenero()
                + " - " + discoNuevo.getCantante());
        this.discoComboBoxModel.addElement(discoNuevo.getNombre());
        this.discoCancionComboBoxModel.addElement(discoNuevo.getNombre());

        this.nombreDiscoTextField.setText("");
        this.cantanteDiscoTextField.setText("");
        this.generoDiscoTextField.setText("");
        this.anioDiscoTextField.setText("");
        this.ubicacionDiscoTextField.setText("");
        this.imagenDiscoTextField.setText("");
        JOptionPane.showMessageDialog(this, "Se ha creado el disco.", "Exito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_botonCrearDiscoActionPerformed

    private void anioDiscoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anioDiscoTextFieldActionPerformed

    }//GEN-LAST:event_anioDiscoTextFieldActionPerformed
    /**
     * Unicamente se permite digitar numeros en el textField de año;
     *
     * @param evt Evento que se activa a la hora de digitar
     */
    private void anioDiscoTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_anioDiscoTextFieldKeyTyped
        this.digitarNumeros(evt);
    }//GEN-LAST:event_anioDiscoTextFieldKeyTyped

    /**
     * Actualizar la informacion del disco seleccionado en el comboBox
     *
     * @param evt Evento que se activa a la hora de presionar el boton
     */
    private void botonVerDiscoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerDiscoActionPerformed
        if (this.emisora.getDiscos().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay discos creados.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String nombreDisco = (String) this.discoComboBoxModel.getSelectedItem();
        Disco disco = this.emisora.obtenerDisco(nombreDisco);
        InformacionDisco ventanaInformacion;

        try {
            ventanaInformacion = new InformacionDisco(disco, this.discoComboBoxModel, this.discosListModel, this.emisora);
            ventanaInformacion.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            ventanaInformacion.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_botonVerDiscoActionPerformed

    /**
     * Abre la ventana de informacion sobre el programa seleccionado
     *
     * @param evt El evento ejecutado al presionar el boton
     */
    private void verInformacionProgramaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verInformacionProgramaBtnActionPerformed
        // Verificar que existan programas
        if (this.emisora.getProgramas().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay programas creados.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Obtener programa seleccionado del modelo
        String nombrePrograma = this.programasComboBoxModel.getSelectedItem().toString();
        Programa programaSeleccionado = this.emisora.obtenerProgramaPorNombre(nombrePrograma);
        // Abrir informacion para el programa
        InformacionPrograma ventanaInformacion = new InformacionPrograma(this.emisora, programaSeleccionado,
                this.programasListModel, this.programasComboBoxModel, this.programasDeEmisoraListModel);
        ventanaInformacion.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        ventanaInformacion.setVisible(true);
    }//GEN-LAST:event_verInformacionProgramaBtnActionPerformed

    private void cancionArchivoNombreInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancionArchivoNombreInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancionArchivoNombreInputActionPerformed

    /**
     * Permite ver la información de la canción
     *
     * @param evt Evento que se activa a la hora de presionar el boton
     */
    private void verInformacionCancionArchivoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verInformacionCancionArchivoBtnActionPerformed
        // Validaciones 
        if (this.emisora.getCancionesArchivo().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay canciones registradas...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Consigue la informacion de la cancion
        String cancionSeleccionada = (String) this.actualizarCancionArchivoComboBox.getSelectedItem();
        CancionArchivo cancionActual = this.emisora.obtenerCancionArchivo(cancionSeleccionada);

        InformacionCancionArchivo ventanaInformacion = new InformacionCancionArchivo(cancionActual,
                cancionesArchivoBoxModel, this.emisora);
        ventanaInformacion.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        ventanaInformacion.setVisible(true);
    }//GEN-LAST:event_verInformacionCancionArchivoBtnActionPerformed

    /**
     * Agrega una cancion a la emisora
     *
     * @param evt Evento que se activa a la hora de presionar el boton
     */
    private void agregarCancionArchivoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarCancionArchivoBtnActionPerformed

        String album = this.cancionArchivoAlbumInput.getText().trim();
        String nombre = this.cancionArchivoNombreInput.getText().trim();
        String cantante = this.cancionArchivoCantanteInput.getText().trim();
        String duracion = this.cancionArchivoDuracionInput.getText().trim();
        String genero = this.cancionArchivoGeneroInput.getText().trim();
        String path = this.cancionArchivoPathInput.getText().trim();

        // Validaciones
        if (album.isEmpty() || nombre.isEmpty() || cantante.isEmpty()
                || duracion.isEmpty() || genero.isEmpty() || path.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Datos Invalidos...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (this.emisora.verificarCancionArchivoRepetida(nombre)) {
            JOptionPane.showMessageDialog(this, "Ya existe una cancion con ese nombre...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int duracionInt = Integer.parseInt(duracion);

        CancionArchivo nuevaCancion = new CancionArchivo(nombre, duracionInt, cantante,
                genero, album, path);

        this.emisora.agregarCancionArchivo(nuevaCancion);
        this.cancionesArchivoListModel.addElement(nuevaCancion.getNombre());
        this.cancionesArchivoBoxModel.addElement(nuevaCancion.getNombre());

        this.cancionArchivoAlbumInput.setText("");
        this.cancionArchivoNombreInput.setText("");
        this.cancionArchivoCantanteInput.setText("");
        this.cancionArchivoDuracionInput.setText("");
        this.cancionArchivoGeneroInput.setText("");
        this.cancionArchivoPathInput.setText("");

    }//GEN-LAST:event_agregarCancionArchivoBtnActionPerformed

    /**
     * Solo permite digitar digitos
     *
     * @param evt Evento que se activa a la hora de digitar
     */
    private void cancionArchivoDuracionInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancionArchivoDuracionInputKeyTyped
        this.digitarNumeros(evt);
    }//GEN-LAST:event_cancionArchivoDuracionInputKeyTyped

    private void nombreCancionInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreCancionInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreCancionInputActionPerformed

    private void duracionCancionInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duracionCancionInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_duracionCancionInputActionPerformed

    private void duracionCancionInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_duracionCancionInputKeyTyped
        this.digitarNumeros(evt);
    }//GEN-LAST:event_duracionCancionInputKeyTyped

    private void listaDiscoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaDiscoComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listaDiscoComboBoxActionPerformed
        /**
         * Añade una cancion a un disco seleccionado si es que existe alguno, de lo contrario emite un 
         * mensaje de error
         * @param evt Evento que se activa al presiona un boton
         */
    private void botonAgregarCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarCancionActionPerformed
        if (emisora.getDiscos().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay discos donde agregar la cancion.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String nombreDisco = (String) this.discoCancionCombo.getSelectedItem().toString();
        
        Disco disco = this.emisora.obtenerDisco(nombreDisco);
        
        String nombreCancion = this.nombreCancionInput.getText();
        String nombreCantante = this.cantanteCancionInput.getText();
        String generoCancion = this.generoCancionInput.getText();
        String duracionCancionStr = this.duracionCancionInput.getText();

        if (nombreCancion.isEmpty() || nombreCantante.isEmpty() || generoCancion.isEmpty() || duracionCancionStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Datos incorrectos...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ArrayList<Cancion> canciones = disco.getCanciones();
        for (Cancion cancionVerificar : canciones) {
            if (cancionVerificar.getNombre().equals(nombreCancion)) {
                JOptionPane.showMessageDialog(this, "Ya existe una cancion con ese nombre", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        int duracionCancion = Integer.parseInt(duracionCancionStr);
        Cancion cancionNueva = new Cancion(nombreCancion, duracionCancion, nombreCantante, generoCancion);
        disco.agregarCancion(cancionNueva);
        seleccionarDiscoComboBoxActionPerformed(evt);
        JOptionPane.showMessageDialog(this, "Cancion Agregada...", "Exito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_botonAgregarCancionActionPerformed

    /**
     * Carga las canciones de dicho archivo en el modelo
     *
     * @param evt El evento generado cuando el boton es presionado
     */
    private void cargarCancionesArchivoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarCancionesArchivoBtnActionPerformed
        // Validar input del path
        if (this.cargarCancionesArchivoPathInput.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un path...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Cargar path del archivo
        String filePath = this.cargarCancionesArchivoPathInput.getText();
        ExcelReader cancionesExcelData = new ExcelReader(filePath);
        // Verificar si el archivo se carga correctamente
        if (!cancionesExcelData.cargarArchivoExcel()) {
            JOptionPane.showMessageDialog(this, "Path de archivo invalido...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Obtener canciones
        ArrayList<CancionArchivo> cancionesCargadas = cancionesExcelData.getCancionesArchivoCargadas();
        // Cargar canciones al modelo
        for (CancionArchivo cancionCargada : cancionesCargadas) {
            if (this.emisora.obtenerCancionArchivo(cancionCargada.getNombre()) == null) {
                this.cancionesArchivoBoxModel.addElement(cancionCargada.getNombre());
                this.cancionesArchivoListModel.addElement(cancionCargada.getNombre());
                this.emisora.agregarCancionArchivo(cancionCargada);
            }
        }
        this.cargarCancionesArchivoPathInput.setText("");
        JOptionPane.showMessageDialog(this, "Canciones Cargadas...", "Exito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_cargarCancionesArchivoBtnActionPerformed
        /**
         * Actualiza la lista de canciones y el comboBox de canciones al seleccionar un disco
         * o agregar una cancion nueva.
         * @param evt Evento que se activa al seleccionar un elemento diferente del ComboBox
         */
    private void seleccionarDiscoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarDiscoComboBoxActionPerformed
        String nombreDisco = (String) this.seleccionarDiscoComboBox.getSelectedItem();

        Disco disco = this.emisora.obtenerDisco(nombreDisco.trim());
        ArrayList<Cancion> canciones = disco.getCanciones();
        if (this.cancionesActComboBoxModel.getSize() > 0) {
            this.cancionesActComboBoxModel.removeAllElements();
            this.cancionesListModel.removeAllElements();
        }

        for (Cancion cancionAgregar : canciones) {
            this.cancionesActComboBoxModel.addElement(cancionAgregar.getNombre());
            this.cancionesListModel.addElement(cancionAgregar.getNombre() + " - "
                    + cancionAgregar.getGenero() + " - " + cancionAgregar.getCantante());
        }
    }//GEN-LAST:event_seleccionarDiscoComboBoxActionPerformed
        /**
         * Verifica que existan canciones en el disco seleccionado, de haber, llama una nueva ventana
         * en la cual se edita la cancion
         * @param evt Evento que se activa a la hora de presionar el boton
         */
    private void editarCancionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarCancionBtnActionPerformed
        if (this.discoCancionComboBoxModel.getSize() <= 0) {
            JOptionPane.showMessageDialog(this, "El disco no contiene canciones.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String nombreDisco = (String) this.seleccionarDiscoComboBox.getSelectedItem();
        Disco disco = this.emisora.obtenerDisco(nombreDisco);

        if (disco.getCanciones().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El disco no contiene canciones...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ArrayList<Cancion> canciones = disco.getCanciones();
        Cancion cancionAct;
        for (Cancion cancion : canciones) {
            if (cancion.getNombre().equals(this.cancionesActComboBoxModel.getSelectedItem())) {
                cancionAct = cancion;
                InformacionCancionDisco ventanaInformacion = new InformacionCancionDisco(this, cancionesActComboBoxModel,
                        cancionesListModel, cancion);
                ventanaInformacion.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                this.setVisible(false);
                ventanaInformacion.setLocationRelativeTo(null);
                ventanaInformacion.setVisible(true);
                break;
            }
        }

    }//GEN-LAST:event_editarCancionBtnActionPerformed

    private void cancionPorGeneroInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancionPorGeneroInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancionPorGeneroInputActionPerformed

    /**
     * Muesta las canciones consultadas por genero
     * @param evt Evento que se activa a la hora de presionar el boton
     */
    private void botonConsultarCancionesGeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConsultarCancionesGeneroActionPerformed
        // Limpia la lista
        this.cancionesPorGenero.removeAllElements();

        //Consigue el genero que se quiere buscar
        String generoPorBuscar = this.cancionPorGeneroInput.getText().trim();

        //Itera por las canciones de archivo disponibles
        ArrayList<CancionArchivo> cancionesDisponibles = this.emisora.getCancionesArchivo();

        for (CancionArchivo cancionActual : cancionesDisponibles) {
            if (cancionActual.getGenero().equals(generoPorBuscar)) {
                this.cancionesPorGenero.addElement("Canción: " + cancionActual.getNombre()
                        + " | Cantante: " + cancionActual.getCantante() + " | Fuente: Archivo");
            }
        }

        //Itera por las todos los discos
        ArrayList<Disco> discosDisponibles = this.emisora.getDiscos();

        for (Disco discoActual : discosDisponibles) {
            if (discoActual.getGenero().equals(generoPorBuscar)) {

                //Itera por todas las canciones del disco
                for (Cancion cancionActual : discoActual.getCanciones()) {
                    this.cancionesPorGenero.addElement("Canción: " + cancionActual.getNombre()
                            + " | Cantante: " + cancionActual.getCantante() + " | Fuente: Disco "
                            + discoActual.getNombre());
                }
            }
        }


    }//GEN-LAST:event_botonConsultarCancionesGeneroActionPerformed

    /**
     * Muesta las canciones consultadas por cantante
     * @param evt Evento que se activa a la hora de presionar el boton
     */
    private void botonConsultarCancionesCantanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConsultarCancionesCantanteActionPerformed
        // Limpia la lista
        this.cancionesPorCantante.removeAllElements();

        //Consigue el genero que se quiere buscar
        String cantantePorBuscar = this.cancionPorCantanteInput.getText().trim();

        //Itera por las canciones de archivo disponibles
        ArrayList<CancionArchivo> cancionesDisponibles = this.emisora.getCancionesArchivo();

        for (CancionArchivo cancionActual : cancionesDisponibles) {
            if (cancionActual.getCantante().equals(cantantePorBuscar)) {
                this.cancionesPorCantante.addElement("Canción: " + cancionActual.getNombre()
                        + " | Cantante: " + cancionActual.getCantante() + " | Fuente: Archivo");
            }
        }

        //Itera por las todos los discos
        ArrayList<Disco> discosDisponibles = this.emisora.getDiscos();

        for (Disco discoActual : discosDisponibles) {
            if (discoActual.getCantante().equals(cantantePorBuscar)) {

                //Itera por todas las canciones del disco
                for (Cancion cancionActual : discoActual.getCanciones()) {
                    this.cancionesPorCantante.addElement("Canción: " + cancionActual.getNombre()
                            + " | Cantante: " + cancionActual.getCantante() + " | Fuente: Disco "
                            + discoActual.getNombre());
                }
            }
        }

    }//GEN-LAST:event_botonConsultarCancionesCantanteActionPerformed
    
    /**
     * Crea una nueva Playlist
     * @param evt Evento que se activa a la hora de presionar el boton
     */
    private void botonAgregarPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarPlaylistActionPerformed

        String nombre = this.playlistNombreInput.getText().trim();
        
        // Validaciones
        if (this.emisora.getProgramas().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay programas registrados...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese el nombre de la Playlist...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Programa programaSeleccionado = this.emisora.obtenerProgramaPorNombre((String) this.playlistProgramaComboBox.getSelectedItem());
        
        ArrayList<Programa> programas = this.emisora.getProgramas();

        for (Programa programaActual : programas) {
            if (programaActual.getPlaylist() == null) {
            } else if (programaActual.getPlaylist().getNombre().equals(nombre)) {
                JOptionPane.showMessageDialog(this, "Ya existe una playlist con ese nombre...", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        PlayList nuevaPlaylist = new PlayList(nombre, programaSeleccionado.getGenero());

        ArrayList<Cancion> allCanciones = new ArrayList<Cancion>();

        // Revisa todas las canciones para agregar las del mismo genero
        for (CancionArchivo cancionActual : this.emisora.getCancionesArchivo()) {
            if (cancionActual.getGenero().equals(programaSeleccionado.getGenero())) {
                allCanciones.add((Cancion) cancionActual);
            }
        }
        // Revisa todos los discos agregar las del mismo genero 
        for (Disco discoActual : this.emisora.getDiscos()) {
            if (discoActual.getGenero().equals(programaSeleccionado.getGenero())) {

                for (Cancion cancionActual : discoActual.getCanciones()) {
                    if (cancionActual.getGenero().equals(programaSeleccionado.getGenero())) {
                        allCanciones.add(cancionActual);
                    }
                }

            }
        }

        if (allCanciones.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay canciones de ese genero...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Agrega canciones al azar a la playlist
        while (nuevaPlaylist.getDuracion() <= programaSeleccionado.getDuracion() - 5) {
            Random rand = new Random();
            Cancion cancionActual = allCanciones.get(rand.nextInt(allCanciones.size()));

            nuevaPlaylist.addCancion(cancionActual);
            allCanciones.remove(cancionActual);

            nuevaPlaylist.setDuracion(nuevaPlaylist.getDuracion() + cancionActual.getDuracion());
            
            if (allCanciones.isEmpty() && nuevaPlaylist.getDuracion() > programaSeleccionado.getDuracion()) {
                break;
            } else if (allCanciones.isEmpty() && nuevaPlaylist.getDuracion() < 
                    (programaSeleccionado.getDuracion() - 5)) {
                JOptionPane.showMessageDialog(this, "No sufieciente canciones...", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            } 
        }

        // Agrega la playlist al programa
        programaSeleccionado.setPlaylist(nuevaPlaylist);
        
        // Muesta la playlist en el GUI
        this.playlistListModel.addElement("Nombre: " + nuevaPlaylist.getNombre()
                + " | Genero: " + nuevaPlaylist.getGenero()
                + " | Duracion: " + nuevaPlaylist.getDuracion());
        
        this.playlistComboBoxModel.addElement(nuevaPlaylist.getNombre());
        
        JOptionPane.showMessageDialog(this, "Playlist creada...", "Exito", JOptionPane.INFORMATION_MESSAGE);
        
        if (programaSeleccionado.getLocutor() == null) {
            JOptionPane.showMessageDialog(this, "No hay locutor asignado al programa...", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Enviar correo
        programaSeleccionado.enviarCorreoPlayList();
    }//GEN-LAST:event_botonAgregarPlaylistActionPerformed
    
    /**
     * Muesta las canciones de la Playlist seleccionada
     *
     * @param evt El evento generado al utilizar el combo box
     */
    private void playlistsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playlistsComboActionPerformed
        this.cancionesEnPlaylistListModel.removeAllElements();

        PlayList programaSeleccionado = this.emisora.obtenerPlaylist((String) playlistsCombo.getSelectedItem());
        
        for (Cancion cancionActual : programaSeleccionado.getCanciones()) {
            this.cancionesEnPlaylistListModel.addElement("Nombre: " + cancionActual.getNombre()
                    + " | Cantante: " + cancionActual.getCantante()
                    + " | Genero: " + cancionActual.getGenero()
                    + " | Duracion: " + cancionActual.getDuracion());
        }
    }//GEN-LAST:event_playlistsComboActionPerformed
   
    /**
     * Carga las canciones del archivo excel en el path
     * @param evt Evento generado al presionar el boton
     */
    private void cargarCancionesDiscoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarCancionesDiscoBtnActionPerformed
        // Validar que existan discos
        if (this.emisora.getDiscos().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se han agregado discos...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Validar input del path
        if (this.cargarCancionesDiscoInput.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un path...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Cargar path del archivo
        String filePath = this.cargarCancionesDiscoInput.getText();
        ExcelReader cancionesExcelData = new ExcelReader(filePath);
        // Verificar si el archivo se carga correctamente
        if (!cancionesExcelData.cargarArchivoExcelDisco()) {
            JOptionPane.showMessageDialog(this, "Path de archivo invalido...", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Obtener disco
        String nombreDisco = this.discoComboBoxModel.getSelectedItem().toString();
        ArrayList<Cancion> cancionesCargadas = cancionesExcelData.getCancionesDiscoCargadas();
        // Agregar canciones a los modelos
        for(Cancion cancionCargada : cancionesCargadas) {
            // Revisar que la cancion no exista en el disco
            if(this.emisora.obtenerDisco(nombreDisco).obtenerCancionPorNombre(cancionCargada.getNombre()) == null) {
                this.cancionesListModel.addElement(cancionCargada.getNombre());
                this.cancionesActComboBoxModel.addElement(cancionCargada.getNombre());
                this.emisora.obtenerDisco(nombreDisco).agregarCancion(cancionCargada);
            }
        }
        this.cargarCancionesDiscoInput.setText("");
        JOptionPane.showMessageDialog(this, "Canciones Cargadas...", "Exito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_cargarCancionesDiscoBtnActionPerformed

    private void programaNombreInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programaNombreInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_programaNombreInputActionPerformed

    /**
     * Solo permite le permite al usuario digitar numeros
     * @param evt Evento que se activa a la hora de digitar
     */
    public void digitarNumeros(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();
        if (c < '0' || c > '9') {
            evt.consume();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IdLocutorLabel;
    private javax.swing.JComboBox actualizarCancionArchivoComboBox;
    private javax.swing.JLabel actualizarCancionArchivoLabel;
    private javax.swing.JLabel actualizarLocutorLabel;
    private javax.swing.JLabel actualizarProgramaLabel;
    private javax.swing.JComboBox actualizarProgramasComboBox;
    private javax.swing.JButton agregarCancionArchivoBtn;
    private javax.swing.JLabel agregarCancionLabel;
    private javax.swing.JLabel anioDiscoLabel;
    public javax.swing.JTextField anioDiscoTextField;
    private javax.swing.JButton botonAgregarCancion;
    private javax.swing.JButton botonAgregarLocutor;
    private javax.swing.JButton botonAgregarPlaylist;
    private javax.swing.JButton botonAsignarLocutor;
    private javax.swing.JButton botonConsultarCancionesCantante;
    private javax.swing.JButton botonConsultarCancionesGenero;
    private javax.swing.JButton botonCrearDisco;
    private javax.swing.JButton botonCrearNuevoPrograma;
    private javax.swing.JButton botonVerDisco;
    private javax.swing.JButton botonVerInfoLocutor;
    private javax.swing.JButton btnActualizarEmisora;
    private javax.swing.JTextField cancionArchivoAlbumInput;
    private javax.swing.JLabel cancionArchivoAlbumLabel;
    private javax.swing.JTextField cancionArchivoCantanteInput;
    private javax.swing.JLabel cancionArchivoCantanteLabel;
    private javax.swing.JTextField cancionArchivoDuracionInput;
    private javax.swing.JLabel cancionArchivoDuracionLabel;
    private javax.swing.JTextField cancionArchivoGeneroInput;
    private javax.swing.JLabel cancionArchivoGeneroLabel;
    private javax.swing.JTextField cancionArchivoNombreInput;
    private javax.swing.JLabel cancionArchivoNombreLabel;
    private javax.swing.JTextField cancionArchivoPathInput;
    private javax.swing.JLabel cancionArchivoPathLabel;
    private javax.swing.JTextField cancionPorCantanteInput;
    private javax.swing.JList<String> cancionPorCantanteList;
    private javax.swing.JTextField cancionPorGeneroInput;
    private javax.swing.JList<String> cancionPorGeneroList;
    private javax.swing.JList cancionesArchivoList;
    private javax.swing.JLabel cancionesPorCantanteLabel;
    private javax.swing.JLabel cancionesPorGeneroLabel;
    private javax.swing.JPanel cancionesTab;
    private javax.swing.JTextField cantanteCancionInput;
    private javax.swing.JLabel cantanteCancionLabel;
    private javax.swing.JLabel cantanteDiscoLabel;
    private javax.swing.JTextField cantanteDiscoTextField;
    private javax.swing.JButton cargarCancionesArchivoBtn;
    private javax.swing.JLabel cargarCancionesArchivoLabel;
    private javax.swing.JTextField cargarCancionesArchivoPathInput;
    private javax.swing.JButton cargarCancionesDiscoBtn;
    private javax.swing.JTextField cargarCancionesDiscoInput;
    private javax.swing.JLabel cargarCancionesDiscoLabel;
    private javax.swing.JPanel consultasTab;
    private javax.swing.JLabel correoLocutorLabel;
    public javax.swing.JLabel direccionFisicaEmisoraShow;
    public javax.swing.JTextField direccionFisicaInput;
    private javax.swing.JLabel direccionFisicaLabel;
    private javax.swing.JLabel direccionLocutorLabel;
    private javax.swing.JComboBox<String> discoCancionCombo;
    private javax.swing.JLabel discoCancionLabel;
    private javax.swing.JLabel discoNombreLabel;
    private javax.swing.JList<String> discosListaBox;
    private javax.swing.JPanel discosTab;
    private javax.swing.JTextField duracionCancionInput;
    private javax.swing.JLabel duracionCancionLabel;
    private javax.swing.JButton editarCancionBtn;
    private javax.swing.JLabel fechaLocutorLabel;
    public javax.swing.JTextField frecuenciaEmisoraInput;
    public javax.swing.JLabel frecuenciaEmisoraShow;
    private javax.swing.JLabel frecuenciaLabel;
    private javax.swing.JTextField generoCancionInput;
    private javax.swing.JLabel generoCancionLabel;
    private javax.swing.JLabel generoDiscoLabel;
    private javax.swing.JTextField generoDiscoTextField;
    private javax.swing.JLabel imagenDiscoLabel;
    private javax.swing.JTextField imagenDiscoTextField;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator15;
    private javax.swing.JSeparator jSeparator16;
    private javax.swing.JSeparator jSeparator17;
    private javax.swing.JSeparator jSeparator18;
    private javax.swing.JSeparator jSeparator19;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator20;
    private javax.swing.JSeparator jSeparator21;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JList<String> listaCanciones;
    private javax.swing.JComboBox<String> listaDiscoComboBox;
    private javax.swing.JLabel listaDiscosLabel;
    private javax.swing.JList<String> listaLocutoresBox;
    private javax.swing.JLabel listaLocutoresLabel;
    private javax.swing.JLabel listaPlaylistsLabel;
    private javax.swing.JPanel listadosTab;
    private javax.swing.JTextField locutorCorreoInput;
    private javax.swing.JTextField locutorDireccionInput;
    private javax.swing.JTextField locutorFechaInput;
    private javax.swing.JTextField locutorIdInput;
    private javax.swing.JTextField locutorNombreInput;
    private javax.swing.JTextField locutorSexoInput;
    private javax.swing.JTextField locutorTelefonoInput;
    private javax.swing.JComboBox<String> locutoresActualizarCombo;
    private javax.swing.JLabel locutoresDeEmisoraLabel;
    private javax.swing.JList<String> locutoresDeEmisoraList;
    private javax.swing.JPanel locutoresTab;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.Menu menu4;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuBar menuBar2;
    private javax.swing.JTextField nombreCancionInput;
    private javax.swing.JLabel nombreCancionLabel;
    private javax.swing.JTextField nombreDiscoTextField;
    public javax.swing.JTextField nombreEmisoraInput;
    public javax.swing.JLabel nombreEmisoraShow;
    private javax.swing.JLabel nombreLabel;
    private javax.swing.JLabel nombreLocutorLabel;
    private javax.swing.JLabel nuevaDireccionFisicaLabel;
    private javax.swing.JLabel nuevaFrecuenciaLabel;
    private javax.swing.JLabel nuevaPlaylistLabel;
    private javax.swing.JLabel nuevoLocutorLabel;
    private javax.swing.JLabel nuevoNombreLabel;
    private javax.swing.JLabel nuevoProgramaLabel;
    private javax.swing.JLabel nuevoUrlLabel;
    private javax.swing.JLabel playlistNombre;
    private javax.swing.JTextField playlistNombreInput;
    private javax.swing.JComboBox<String> playlistProgramaComboBox;
    private javax.swing.JComboBox<String> playlistsCombo;
    private javax.swing.JList<String> playlistsListaCancionesBox;
    private javax.swing.JList<String> playlistsListaPlaylistsBox;
    private javax.swing.JLabel playlistsProgramaLabel;
    private javax.swing.JPanel playlistsTab;
    private javax.swing.JLabel programaAsignarLocutorLabel;
    private javax.swing.JTextField programaDuracionInput;
    private javax.swing.JTextField programaHorarioInput;
    private javax.swing.JLabel programaHorarioLabel;
    private javax.swing.JTextField programaNombreInput;
    private javax.swing.JLabel programaNombreLabel;
    private javax.swing.JLabel programasDeEmisoraLabel;
    private javax.swing.JList<String> programasDeEmisoraList;
    private javax.swing.JLabel programasDuracionLabel;
    private javax.swing.JTextField programasGeneroInput;
    private javax.swing.JComboBox<String> programasListaCombo;
    private javax.swing.JLabel programasListaLabel;
    private javax.swing.JList<String> programasListaProgramasBox;
    private javax.swing.JComboBox<String> programasLocutoresCombo;
    private javax.swing.JPanel programasTab;
    private javax.swing.JPanel radioEmisoraTab;
    private javax.swing.JComboBox<String> seleccionarCancionComboBox;
    private javax.swing.JComboBox<String> seleccionarDiscoComboBox;
    private javax.swing.JLabel seleccionarDiscoLabel;
    private javax.swing.JLabel sexoLocutorLabel;
    private javax.swing.JLabel telefonoLocutorLabel;
    private javax.swing.JLabel ubicacionDiscoLabel;
    private javax.swing.JTextField ubicacionDiscoTextField;
    public javax.swing.JTextField urlEmisoraInput;
    public javax.swing.JLabel urlEmisoraShow;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JLabel verCancionesPlaylistLabel;
    private javax.swing.JButton verInformacionCancionArchivoBtn;
    private javax.swing.JButton verInformacionProgramaBtn;
    private javax.swing.JTabbedPane windowTabs;
    // End of variables declaration//GEN-END:variables
}
